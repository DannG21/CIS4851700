Student Name: Daniel Aparicio.

Question: Explain why the OR '1'='1' injection works. What SQL command is being constructed?
A: Because OR '1'='1' is always true, the WHERE clause passes and returns the first row (admin), bypassing authentication.

Question: What makes this comment a security threat? Why should input be sanitized?
A: An attacker could steal other users’ cookies, deface the site, or load malicious scripts under your domain.

Reflection:

In real‐world applications, SQL injection can let an attacker slip crafted inputs into a query, tricking the database into dumping or altering data. By turning a simple login check into a tautology, for example, an attacker could bypass authentication entirely. Cross‐Site Scripting (XSS) works by embedding malicious JavaScript in pages—once stored in a comment or profile field, that script runs in every visitor’s browser, stealing cookies or redirecting users without their knowledge. Session hijacking takes advantage of stolen or guessed session cookies to impersonate legitimate users, gaining full access to protected pages and actions.

To defend against these threats, we kept SQL code and user data strictly separate using parameterized queries, ensuring that even special characters in inputs are never executed as SQL. For XSS, we sanitized and escaped every comment before storing it (and again before rendering), so angle brackets and quotes become harmless text rather than executable scripts. And by configuring our session cookies with HttpOnly, SameSite, and (in production) Secure flags, we prevented client‐side scripts from reading cookies, blocked cross‐site requests, and ensured tokens travel only over HTTPS.

Of course, attackers don’t stand still: if one field is hardened, they’ll probe others or switch to blind-injection techniques, inferring data bit by bit. Poorly tuned sanitization can be bypassed with exotic payloads—inline SVG handlers or malformed encodings. And without site-wide HTTPS, even the best cookie flags can be defeated by packet sniffers. In practice, a layered, defense-in-depth approach—combining parameterization, escaping, secure headers, and strict transport security—is the only way to stay ahead in this ongoing game of cat and mouse.